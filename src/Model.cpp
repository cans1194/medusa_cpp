#include "Model.h"

#define WIDTH  11
#define HEIGHT 11

Model::Model(Adafruit_SSD1306_I2c *display_driver)
{
    driver = display_driver;
	model_t heal_model = {8, Model::heal};
	model_t illness_model = {4, Model::illness};
	model_t death_model = {4, Model::death};
	model_t hide = {7, Model::hide};
}

uint16_t Model::heal[] = {  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0400, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x0000, 0x0000, 0x0400, 0x0E00, 0x0400, 0x0000, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x0000, 0x0400, 0x0400, 0x1F00, 0x0400, 0x0400, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x0E00, 0x0A00, 0x3B80, 0x2080, 0x3B80, 0x0A00, 0x0E00, 0x0000, 0x0000,
							0x0000, 0x1F00, 0x1100, 0x71C0, 0x4040, 0x4040, 0x4040, 0x71C0, 0x1100, 0x1F00, 0x0000,
							0x3F80, 0x2080, 0xE0E0, 0x8020, 0x8020, 0x8020, 0x8020, 0x8020, 0xE0E0, 0x2080, 0x3F80,
							0x4040, 0x0C60, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0C60, 0x4040,
							0x4040, 0x0000, 0x0000, 0x0000, 0x0000, 0x0400, 0x0000, 0x0000, 0x0000, 0x0000, 0x4040
												
};
/**/
uint16_t Model::illness[] = { 0x2480, 0x4900, 0x2480, 0x1240, 0x2480, 0x4900, 0xFFE0, 0x60C0, 0x71C0, 0x3F80, 0x1F00,
							0x1240, 0x2480, 0x4900, 0x2480, 0x1240, 0x2480, 0xFFE0, 0x60C0, 0x71C0, 0x3F80, 0x1F00,
							0x2480, 0x1240, 0x2480, 0x4900, 0x2480, 0x1240, 0xFFE0, 0x60C0, 0x71C0, 0x3F80, 0x1F00,
							0x4900, 0x2480, 0x1240, 0x2480, 0x4900, 0x2480, 0xFFE0, 0x60C0, 0x71C0, 0x3F80, 0x1F00
};
/**/
uint16_t Model::death[] = { 0x0000, 0x0000, 0x6000, 0x9E00, 0x9100, 0x9520, 0x1120, 0x0F20, 0x00C0, 0x0000, 0x0000, 
							0x1800, 0x2400, 0x0400, 0x1100, 0x1500, 0x1100, 0x1100, 0x0E00, 0x0400, 0x0480, 0x0300,
							0x0300, 0x0080, 0x0080, 0x0F00, 0x1100, 0x1500, 0x1100, 0x1E00, 0x2000, 0x2000, 0x1800,
							0x0000, 0x0000, 0x0040, 0x0E20, 0x1120, 0x75C0, 0x9100, 0x8E00, 0x4000, 0x0000, 0x0000,
};
/**/
uint16_t Model::hide[] = {  0x1F00, 0x0080, 0x6080, 0x8020, 0x8020, 0x8020, 0x8020, 0x8020, 0x20C0, 0x2000, 0x1F00,
							0x0000, 0x0200, 0x1900, 0x2480, 0x4080, 0x1100, 0x2040, 0x2480, 0x1300, 0x0800, 0x0000,
							0x0000, 0x0C00, 0x0200, 0x1A80, 0x2080, 0x2B00, 0x0800, 0x0600, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x1900, 0x0500, 0x0E00, 0x1400, 0x1300, 0x0000, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x0200, 0x1A00, 0x0400, 0x0B00, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x0000, 0x0000, 0x0400, 0x0E00, 0x0400, 0x0000, 0x0000, 0x0000, 0x0000,
							0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0400, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
/**/



/*Private*/
void Model::drawModel(uint8_t x, uint8_t y, model_t *model, uint8_t frame, uint16_t color)
{
	uint32_t i, b, j;
	
	for (i = 0; i < HEIGHT; i++) {
		b = model->data[frame * HEIGHT + i];
		for (j = 0; j < WIDTH; j++) {
			if ((b << j) & 0x8000) {
				driver->drawPixel(x + j, y + i, color);
			} else {
				driver->drawPixel(x + j, y + i, !color);
			}
		}
	}
}
/**/


/*Public*/
void Model::drawHeal(uint8_t x, uint8_t y, uint8_t frame, uint16_t color)
{
	if (heal_model.frame_size < frame)
		return;
	drawModel(x, y, &heal_model, frame, color);
}
/**/